#!/bin/zsh

## Path section
# Set $PATH if ~/.local/bin exist
if [ -d "$HOME/.local/bin" ]; then
    export PATH=$HOME/.local/bin:$PATH
fi

fpath=($HOME/dotfiles/zsh/functies $fpath)

# eval "$(starship init zsh)"
# function set_win_title(){
#     echo -ne "\033]0; $USER@$HOST:${PWD/$HOME/~} \007"
# }
# precmd_functions+=(set_win_title)

## Options section
setopt correct                                                  # Auto correct mistakes
setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
setopt nocaseglob                                               # Case insensitive globbing
setopt rcexpandparam                                            # Array expension with parameters
setopt nocheckjobs                                              # Don't warn about running processes when exiting
setopt numericglobsort                                          # Sort filenames numerically when it makes sense
setopt nobeep                                                   # No beep
setopt appendhistory                                            # Immediately append history instead of overwriting
# setopt sharehistory
setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
setopt autocd                                                   # if only directory path is entered, cd there.
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus


# Dark theme
export LS_COLORS='di=38;5;39:fi=38;5;255:ln=38;5;45:pi=38;5;214:so=38;5;214:bd=38;5;27:cd=38;5;27:or=38;5;203:mi=38;5;203:ex=38;5;46'
# Light theme
# export LS_COLORS='di=38;5;23:fi=38;5;232:ln=38;5;24:pi=38;5;166:so=38;5;166:bd=38;5;18:cd=38;5;18:or=38;5;160:mi=38;5;160:ex=38;5;22'
# Completion.
 export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=magenta,bg=white"
autoload -Uz compinit
compinit
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
zstyle ':completion:*' rehash true                              # automatically find new executables in path 
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"         # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '%U%F{cyan}%d%f%u'

# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zcache

# automatically load bash completion functions
autoload -U +X bashcompinit && bashcompinit

HISTFILE=~/.zhistory
HISTSIZE=50000
SAVEHIST=10000

## Keys
# Use emacs key bindings
bindkey -e

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# Git promt
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst

# Define the prompt format
PROMPT='%F{blue}%n@%m %F{green}%~ %F{yellow}$(git_prompt_info)%F{reset} \$ '
# RPROMPT='${vcs_info_msg_0_}'

# Function to retrieve git branch information
git_prompt_info() {
    if [[ -n "${vcs_info_msg_0_}" ]]; then
        echo -n "(${vcs_info_msg_0_})"
    fi
}

# Configure vcs_info for git
zstyle ':vcs_info:git:*' formats '%b'

# # [PageUp] - Up a line of history
# if [[ -n "${terminfo[kpp]}" ]]; then
#   bindkey -M emacs "${terminfo[kpp]}" up-line-or-history
#   bindkey -M viins "${terminfo[kpp]}" up-line-or-history
#   bindkey -M vicmd "${terminfo[kpp]}" up-line-or-history
# fi
# # [PageDown] - Down a line of history
# if [[ -n "${terminfo[knp]}" ]]; then
#   bindkey -M emacs "${terminfo[knp]}" down-line-or-history
#   bindkey -M viins "${terminfo[knp]}" down-line-or-history
#   bindkey -M vicmd "${terminfo[knp]}" down-line-or-history
# fi
#
# # Start typing + [Up-Arrow] - fuzzy find history forward
# if [[ -n "${terminfo[kcuu1]}" ]]; then
#   autoload -U up-line-or-beginning-search
#   zle -N up-line-or-beginning-search
#
#   bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search
#   bindkey -M viins "${terminfo[kcuu1]}" up-line-or-beginning-search
#   bindkey -M vicmd "${terminfo[kcuu1]}" up-line-or-beginning-search
# fi
# # Start typing + [Down-Arrow] - fuzzy find history backward
# if [[ -n "${terminfo[kcud1]}" ]]; then
#   autoload -U down-line-or-beginning-search
#   zle -N down-line-or-beginning-search
#
#   bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search
#   bindkey -M viins "${terminfo[kcud1]}" down-line-or-beginning-search
#   bindkey -M vicmd "${terminfo[kcud1]}" down-line-or-beginning-search
# fi
#
# # [Home] - Go to beginning of line
# if [[ -n "${terminfo[khome]}" ]]; then
#   bindkey -M emacs "${terminfo[khome]}" beginning-of-line
#   bindkey -M viins "${terminfo[khome]}" beginning-of-line
#   bindkey -M vicmd "${terminfo[khome]}" beginning-of-line
# fi
# # [End] - Go to end of line
# if [[ -n "${terminfo[kend]}" ]]; then
#   bindkey -M emacs "${terminfo[kend]}"  end-of-line
#   bindkey -M viins "${terminfo[kend]}"  end-of-line
#   bindkey -M vicmd "${terminfo[kend]}"  end-of-line
# fi
#
# # [Shift-Tab] - move through the completion menu backwards
# if [[ -n "${terminfo[kcbt]}" ]]; then
#   bindkey -M emacs "${terminfo[kcbt]}" reverse-menu-complete
#   bindkey -M viins "${terminfo[kcbt]}" reverse-menu-complete
#   bindkey -M vicmd "${terminfo[kcbt]}" reverse-menu-complete
# fi

# [Backspace] - delete backward
# bindkey -M emacs '^?' backward-delete-char
# bindkey -M viins '^?' backward-delete-char
# bindkey -M vicmd '^?' backward-delete-char
# # [Delete] - delete forward
# if [[ -n "${terminfo[kdch1]}" ]]; then
#   bindkey -M emacs "${terminfo[kdch1]}" delete-char
#   bindkey -M viins "${terminfo[kdch1]}" delete-char
#   bindkey -M vicmd "${terminfo[kdch1]}" delete-char
# else
#   bindkey -M emacs "^[[3~" delete-char
#   bindkey -M viins "^[[3~" delete-char
#   bindkey -M vicmd "^[[3~" delete-char
#
#   bindkey -M emacs "^[3;5~" delete-char
#   bindkey -M viins "^[3;5~" delete-char
#   bindkey -M vicmd "^[3;5~" delete-char
# fi

typeset -g -A key
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# # Control Left - go back a word
# key[Control-Left]="${terminfo[kLFT5]}"
# if [[ -n "${key[Control-Left]}"  ]]; then
# 	bindkey -M emacs "${key[Control-Left]}"  backward-word
# 	bindkey -M viins "${key[Control-Left]}"  backward-word
# 	bindkey -M vicmd "${key[Control-Left]}"  backward-word
# fi
#
# # Control Left - go forward a word
# key[Control-Right]="${terminfo[kRIT5]}"
# if [[ -n "${key[Control-Right]}" ]]; then
# 	bindkey -M emacs "${key[Control-Right]}" forward-word
# 	bindkey -M viins "${key[Control-Right]}" forward-word
# 	bindkey -M vicmd "${key[Control-Right]}" forward-word
# fi
#
# # Alt Left - go back a word
# key[Alt-Left]="${terminfo[kLFT3]}"
# if [[ -n "${key[Alt-Left]}"  ]]; then
# 	bindkey -M emacs "${key[Alt-Left]}"  backward-word
# 	bindkey -M viins "${key[Alt-Left]}"  backward-word
# 	bindkey -M vicmd "${key[Alt-Left]}"  backward-word
# fi
#
# # Control Right - go forward a word
# key[Alt-Right]="${terminfo[kRIT3]}"
# if [[ -n "${key[Alt-Right]}" ]]; then
# 	bindkey -M emacs "${key[Alt-Right]}" forward-word
# 	bindkey -M viins "${key[Alt-Right]}" forward-word
# 	bindkey -M vicmd "${key[Alt-Right]}" forward-word
# fi

## Plugins section: Enable fish style features
# Use autosuggestion
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# Use history substring search
source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh

# Use fzf
source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh

# Arch Linux command-not-found support, you must have package pkgfile installed
# https://wiki.archlinux.org/index.php/Pkgfile#.22Command_not_found.22_hook
[[ -e /usr/share/doc/pkgfile/command-not-found.zsh ]] && source /usr/share/doc/pkgfile/command-not-found.zsh

# Advanced command-not-found hook
[[ -e /usr/share/doc/find-the-command/ftc.zsh ]] && source /usr/share/doc/find-the-command/ftc.zsh

# Use syntax highlighting
# !!!Must be sourced at the end
# https://github.com/zsh-users/zsh-syntax-highlighting?tab=readme-ov-file#why-must-zsh-syntax-highlightingzsh-be-sourced-at-the-end-of-the-zshrc-file
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

source $HOME/.profile
source ${HOME}/dotfiles/zsh/profile

n() {
    export NNN_TMPFILE=$(date -u +"/tmp/NNN_TEMP_%Y-%m-%d")
    touch    $NNN_TMPFILE
    chmod +x $NNN_TMPFILE
    echo     $NNN_TMPFILE

    NVIM_MINIMAL=1 command nnn -a

    . $NNN_TMPFILE

    # rm -f $NNN_TMPFILE > /dev/null
}

alias nnn='NVIM_MINIMAL=1 command nnn -a'

if [ -n $WAYLAND_DISPLAY ]; then 
    NNN_PLUG_PREVIEW='p:preview-tui'
else 
    NNN_PLUG_PREVIEW='p:preview-tui'
    # NNN_PLUG_PREVIEW='p:preview-tabbed'
fi

NNN_PLUG_DEFAULT="$NNN_PLUG_PREVIEW;d:diffs"
NNN_PLUG="$NNN_PLUG_DEFAULT"

export NNN_PLUG

path_dirs=$(fd --type=directory --hidden --no-ignore --follow --max-depth=1  . ~/dirme)
export PATH="$(echo $path_dirs | xargs echo | sed 's#/ #:#g' | sed 's#/$##g'):$PATH"

